010111010
state = [2, 4, 5, 6, 8]
left 


01011001
left = [0, 1, 3]
right = [0, 2]
must alternate? kinda

10110010
left = [1, 3]
right = [0, 2, 3]

start with 0 -> l[0] <= r[0] <= l[1] <= r[1] ...
start with 1 -> r[0] <= l[0] <= r[1] <= l[1] ...


array of areas, all nonnegative.
find intervals i, j with no 0s inbetween?
x = nonzero
0xxxxxxx0x0xxxxx000xx0x0xx000x0x
label the contiguous groups of nonzeros.
0xxxxxxx0x0xxxxx000xx0x0xx000x0x
    A    B   C      D E  F   G H
Now, given i, j, if they have the same label, there is no 0 inbetween.
Expansion is NOT legal if there is a 0 at the start index.
IS legal if there is a 0 at the end index.

So, we want either i, j in the same group, or i is in a group which ends right before j.

xxxxxxx0
i      j

or 

xxxxxxxx
i      j

but NOT

0xxxxxx     or     xx000xxxxxx
i     j            i         j

Do this by checking if j-1 is in the same group as i. area at j doesnt actually matter.
Give the 0 group label 'None'.


States form a poset where state A covers B if A can be formed by using exactly one expansion on B.
Idea: Rather than doing a fully random walk, take a walk down the poset from max to min using only contractions.


How to pick a uniformly random pair of values from r, l which satisfy some condition? 

pick r_i with probability proportional to the number of plausible l_i, e.g. for |r| = |l| = 100, r_i=20 gets weight 80.
Now, pick l_i uniformly from plausible options. reject both if there is another condition not satisfied.